/**
 * @fileoverview Firestore Security Rules for CanvasCraft.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model.  Users can only access their own data.  There are no administrative roles or shared resources.
 *
 * Data Structure:
 * All data is nested under `/users/{userId}`, ensuring that all documents are owned by a specific user. Projects are stored under `/users/{userId}/projects/{projectId}`, and integrations are stored under `/users/{userId}/projects/{projectId}/integrations/{integrationId}`.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - All write operations require authentication.
 * - Data validation is minimal during the prototyping phase, focusing on authorization.
 *
 * Denormalization for Authorization:
 * The `userId` field is included in the Project documents, and the `projectId` is included in the Integration documents. This denormalization allows for direct access checks within subcollections without needing to perform additional `get()` calls to parent documents.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the user is signed in.
    function isSignedIn() {
      return request.auth != null;
    }

    // Helper function to check if the authenticated user ID matches the provided user ID.
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    // Helper function to check if the authenticated user is the owner of an existing document.
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Allows users to read and write their own profile data.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their profile.
     * @deny (create) User with ID 'user123' cannot be created by 'user456'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // User listing is not allowed.
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows users to manage their own projects.
     * @path /users/{userId}/projects/{projectId}
     * @allow (create) User 'user123' can create a new project under their user ID.
     * @deny (update) User 'user123' cannot update a project under 'user456'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/projects/{projectId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows users to manage integrations for their projects.
     * @path /users/{userId}/projects/{projectId}/integrations/{integrationId}
     * @allow (create) User 'user123' can create an integration for their project.
     * @deny (delete) User 'user123' cannot delete an integration for a project they don't own.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/projects/{projectId}/integrations/{integrationId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.projectId == projectId;
      allow update: if isExistingOwner(userId) && request.resource.data.projectId == projectId;
      allow delete: if isExistingOwner(userId);
    }
  }
}